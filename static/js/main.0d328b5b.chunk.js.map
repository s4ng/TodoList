{"version":3,"sources":["components/TodoListTemplate.js","components/Form.js","components/TodoItem.js","components/TodoItemList.js","App.js","serviceWorker.js","index.js"],"names":["TodoListTemplate","_ref","form","children","react_default","a","createElement","className","Form","value","onChange","onCreate","onKeyPress","onClick","TodoItem","_this$props","this","props","text","checked","id","onToggle","onRemove","e","stopPropagation","concat","Component","TodoItemList","nextProps","nextState","todos","todoList","map","src_components_TodoItem","key","App","state","input","handleChange","_this","setState","target","handleCreate","_this$state","handleKeyPress","handleToggle","index","findIndex","todo","selected","nextTodos","Object","toConsumableArray","objectSpread","handleRemove","filter","_this$state2","src_components_TodoListTemplate","src_components_Form","components_TodoItemList","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0d328b5b.chunk.js","sourcesContent":["import React from 'react';\r\nimport './TodoListTemplate.css';\r\n\r\nconst TodoListTemplate = ({form, children}) => {\r\n  return (\r\n    <main className=\"todo-list-template\">\r\n      <div className=\"title\">\r\n        오늘 할 일\r\n      </div>\r\n      <section className=\"form-wrapper\">\r\n        {form}\r\n      </section>\r\n      <section className=\"todos-wrapper\">\r\n       {children}\r\n      </section>\r\n    </main>\r\n  );\r\n};\r\n\r\nexport default TodoListTemplate;","import React from 'react';\r\nimport './Form.css';\r\n\r\nconst Form = ({value, onChange, onCreate, onKeyPress}) => {\r\n  return(\r\n    <div className=\"form\">\r\n      <input value={value} onChange={onChange} onKeyPress={onKeyPress}/>\r\n      <div className=\"create-button\" onClick={onCreate}>\r\n        추가\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Form;","import React, {Component} from 'react';\r\nimport './TodoItem.css';\r\n\r\nclass TodoItem extends Component{\r\n  render(){\r\n    const {text, checked, id, onToggle, onRemove} = this.props;\r\n\r\n    return(\r\n      <div className=\"todo-item\" onClick={() => onToggle(id)}>\r\n        <div className=\"remove\" onClick={(e) => {\r\n          e.stopPropagation(); // onToggle 이 실행되지 않도록 함\r\n          onRemove(id)\r\n        }}>&times;</div>\r\n        <div className={`todo-text ${checked && 'checked'}`}>\r\n          <div>{text}</div>\r\n        </div>\r\n        {\r\n          checked && (<div className=\"check-mark\">✓</div>)\r\n        }\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TodoItem;","import React, {Component} from 'react';\r\nimport TodoItem from './TodoItem';\r\n\r\nclass TodoItemList extends Component{\r\n\r\n  shouldComponentUpdate(nextProps, nextState){\r\n    return this.props.todos !== nextProps.todos;\r\n  }\r\n  render(){\r\n    const{todos, onToggle, onRemove} = this.props;\r\n\r\n    const todoList = todos.map(\r\n      ({id, text, checked}) => (\r\n        <TodoItem\r\n        id={id}\r\n        text={text}\r\n        checked={checked}\r\n        onToggle={onToggle}\r\n        onRemove={onRemove}\r\n        key={id}\r\n        />\r\n      )\r\n    );\r\n\r\n    return(\r\n      <div>\r\n        {todoList}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TodoItemList;","import React, {Component} from 'react';\nimport TodoListTemplate from './components/TodoListTemplate';\nimport Form from './components/Form';\nimport TodoItemList from './components/TodoItemList'\n\nclass App extends Component{\n  id = 3\n\n  state = {\n    input: '',\n    todos: [\n      {id:0, text: '리액트 소개', checked: false},\n      {id:1, text: '리액트 소개', checked: true},\n      {id:2, text: '리액트 소개', checked: false}\n    ]\n  }\n\n  handleChange = (e) => {\n    this.setState({\n      input:e.target.value // input의 다음 바뀔 값\n    });\n  }\n  \n  handleCreate = () => {\n    const { input, todos } = this.state;\n    this.setState({\n      input: '', //인풋을 비우고\n      //concat을 이용하여 배열에 추가\n      todos: todos.concat({\n        id: this.id++,\n        text: input,\n        checked: false\n      })\n    });\n  }\n\n  handleKeyPress = (e) => {\n    if(e.key === 'Enter'){\n      this.handleCreate();\n    }\n  }\n\n  handleToggle = (id) => {\n    const {todos} = this.state;\n\n    const index = todos.findIndex(todo => todo.id === id);\n    const selected = todos[index];\n\n    const nextTodos = [...todos];\n\n    nextTodos[index] = {\n      ...selected,\n      checked: !selected.checked\n    };\n    this.setState({\n      todos: nextTodos\n    });\n    }\n\n  handleRemove = (id) => {\n    const {todos} = this.state;\n    this.setState({\n      todos: todos.filter(todo => todo.id !== id)\n    });\n  }\n\n  render(){\n    const { input, todos } = this.state;\n    const {\n      handleChange,\n      handleCreate,\n      handleKeyPress,\n      handleToggle,\n      handleRemove\n    } = this;\n    return(\n      <TodoListTemplate form={(\n      <Form\n        value={input}\n        onKeyPress={handleKeyPress}\n        onChange={handleChange}\n        onCreate={handleCreate}\n        />\n      )}>\n        <TodoItemList todos={todos} onToggle={handleToggle} onRemove={handleRemove}/>\n      </TodoListTemplate>\n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}